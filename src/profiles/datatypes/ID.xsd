<?xml version="1.0" encoding="UTF-8"?>
<schema version="1.1" xmlns="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
	targetNamespace="http://xmlProfile.de" xmlns:profile="http://xmlProfile.de">
	<include schemaLocation="Datatypes.xsd" />
	<include schemaLocation="FormFieldTypes.xsd" />
	<!-- Datatypes: any Definition (Default) -->

	<element name="elementID" substitutionGroup="profile:element"><!-- name -->
		<complexType>
			<complexContent>
				<extension base="profile:elementType">
					<group ref="profile:IDElementGroup" />
					<assert
						test="if(((profile:restrictions/profile:use[not(text()='optional')]) or (count(profile:restrictions/profile:use)=0)) and not(profile:restrictions/profile:fixContent)) then ((profile:input/*[@hide=false()])or not(profile:input)) else(true())" />
					<assert
						test="if(profile:restrictions/profile:fixContent) then (not(profile:restrictions/profile:defaultContent) and not(profile:restrictions/profile:use) and not(profile:restrictions/profile:occurrence)) else(true())" />
				</extension>
			</complexContent>
		</complexType>
	</element>

	<complexType name="elementIDRefType"><!-- !!!name -->
		<complexContent>
			<extension base="profile:elementInstanceRefType">
				<group ref="profile:IDGroup" /><!-- !!!ref -->
				<assert
					test="if(((profile:restrictions/profile:use[not(text()='optional')]) or (count(profile:restrictions/profile:use)=0)) and not(profile:restrictions/profile:fixContent)) then ((profile:input/*[@hide=false()])or not(profile:input)) else(true())" />
				<assert
					test="if(profile:restrictions/profile:fixContent) then (not(profile:restrictions/profile:defaultContent) and not(profile:restrictions/profile:use) and not(profile:restrictions/profile:occurrence)) else(true())" />
			</extension>
		</complexContent>
	</complexType>


	<complexType name="union_ID">
		<group ref="profile:IDRestrictionGroup" minOccurs="0" /><!-- !!!ref -->
	</complexType>

	<element name="elementInstanceID" substitutionGroup="profile:elementInstance">
		<complexType>
			<complexContent>
				<extension base="profile:elementInstanceType">
					<group ref="profile:IDElementGroup" />
					<assert
						test="if(((profile:restrictions/profile:use[not(text()='optional')]) or (count(profile:restrictions/profile:use)=0)) and not(profile:restrictions/profile:fixContent)) then ((profile:input/*[@hide=false()])or not(profile:input)) else(true())" />
					<assert
						test="if(profile:restrictions/profile:fixContent) then (not(profile:restrictions/profile:defaultContent) and not(profile:restrictions/profile:use) and not(profile:restrictions/profile:occurrence)) else(true())" />
				</extension>
			</complexContent>
		</complexType>
	</element>
	<group name="IDElementGroup">
		<sequence>
			<element name="restrictions" minOccurs="0">
				<complexType>
					<group ref="profile:IDGroup" /><!-- !!!ref -->
				</complexType>
			</element>
			<element name="input" minOccurs="0">
				<complexType>
					<choice maxOccurs="unbounded"><!-- change -->
						<element ref="profile:textField" />
						<element ref="profile:selectionBox" />
					</choice>
				</complexType>
			</element>
		</sequence>
	</group>
	<group name="IDGroup"><!-- !!!name -->
		<sequence>
			<element ref="profile:use" minOccurs="0" />
			<element ref="profile:occurrence" minOccurs="0" />
			<group ref="profile:IDRestrictionGroup" minOccurs="0" />
			<element name="defaultContent" type="profile:ID_fixContent_currentDateType" minOccurs="0" /><!-- 
				!!!type -->
		</sequence>

	</group>
	<group name="IDRestrictionGroup">
		<choice>
			<element name="fixContent" type="profile:ID_fixContent_currentDateType" /><!-- !!!type -->
			<element name="enumeration">
				<complexType>
					<sequence>
						<group ref="profile:ID_fixContent_currentDateGroup" maxOccurs="unbounded" /><!-- !!!ref -->
					</sequence>
					<attribute name="base" type="string" fixed="-" />
				</complexType>
			</element>
			<element name="contentFormat">
				<complexType>
					<sequence>
						<element name="pattern" minOccurs="0">
							<complexType>
								<sequence>
									<element name="regular-expression" type="profile:regular_expression" maxOccurs="unbounded" />
								</sequence>
								<attribute name="base" type="string" fixed="(\i\c*) AND ([\i-[:]][\c-[:]]*)" />
							</complexType>
						</element>
						<element name="length" minOccurs="0">
							<complexType>
								<sequence>
									<element name="minLength" minOccurs="0">
										<complexType>
											<simpleContent>
												<extension base="positiveInteger">
													<attribute name="base" type="string" fixed="-" />
												</extension>
											</simpleContent>
										</complexType>
									</element>
									<element name="maxLength" minOccurs="0">
										<complexType>
											<simpleContent>
												<extension base="positiveInteger">
													<attribute name="base" type="string" fixed="-" />
												</extension>
											</simpleContent>
										</complexType>
									</element>
									<element name="valueExistence" minOccurs="0">
										<complexType>
											<simpleContent>
												<extension base="boolean">
													<attribute name="base" type="string" fixed="-" />
												</extension>
											</simpleContent>
										</complexType>
									</element>
									<element name="length" minOccurs="0">
										<complexType>
											<simpleContent>
												<extension base="positiveInteger">
													<attribute name="base" type="string" fixed="-" />
												</extension>
											</simpleContent>
										</complexType>
									</element>
								</sequence>
							</complexType>
						</element>
						<element name="whitespace" minOccurs="0">
							<complexType>
								<attribute name="method" use="required">
									<simpleType>
										<restriction base="string">
											<enumeration value="preserve" />
											<enumeration value="replace" />
											<enumeration value="collapse" />
										</restriction>
									</simpleType>
								</attribute>
								<attribute name="base" type="string" fixed="collapse" />
							</complexType>
						</element>
					</sequence>
				</complexType>
			</element>
		</choice>
	</group>
	<complexType name="ID_fixContent_currentDateType"><!-- !!!name -->
		<group ref="profile:ID_fixContent_currentDateGroup" /><!-- !!!ref -->
	</complexType>
	<group name="ID_fixContentGroup"><!-- !!!name -->
		<choice>
			<element name="value">
				<complexType>
					<simpleContent>
						<extension base="ID"><!-- !!!base -->
							<attribute name="URL" type="anyURI" />
						</extension>
					</simpleContent>
				</complexType>
			</element>
			<element name="ref">
				<complexType>
					<complexContent>
						<extension base="profile:elementInstanceRefType">
							<attribute name="refValueNotExist" use="required">
								<simpleType>
									<restriction base="string">
										<enumeration value="fail" />
										<enumeration value="succeed" />
									</restriction>
								</simpleType>
							</attribute>
						</extension>
					</complexContent>
				</complexType>
			</element>
			<element name="function">
				<complexType>
					<sequence>
						<element name="concat" type="profile:ID_concatType" minOccurs="0" />
						<element name="replace" type="profile:ID_replaceType" minOccurs="0" />
						<element name="substringAfter" type="profile:ID_substringAfterType" minOccurs="0" />
					</sequence>
				</complexType>
			</element>
		</choice>
	</group>
	<group name="ID_fixContent_currentDateGroup"><!-- !!!name -->
		<choice>
			<group ref="profile:ID_fixContentGroup" minOccurs="0" /><!-- !!!ref -->
			<element name="current-date" type="token" minOccurs="0" />
		</choice>
	</group>

	<complexType name="ID_concatType">
		<sequence maxOccurs="unbounded">
			<element name="item" type="profile:ID_fixContent_currentDateType" />
			<element name="connector" type="string" minOccurs="0" />
		</sequence>
	</complexType>
	<complexType name="ID_replaceType">
		<sequence>
			<element name="item" type="profile:ID_fixContent_currentDateType" />
		</sequence>
		<attribute name="pattern" type="profile:regular_expression" use="required" />
		<attribute name="replaceString" type="string" use="required" />
	</complexType>

	<complexType name="ID_substringAfterType">
		<sequence>
			<element name="item" type="profile:ID_fixContent_currentDateType" />
		</sequence>
		<attribute name="substring" type="string" />
	</complexType>
</schema>